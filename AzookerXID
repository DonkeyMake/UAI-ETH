pragma solidity 0.8.7;
import "./AzookerUAI.sol";
//SPDX-License-Identifier: MIT
abstract contract AzookerXID is AzookerUAI {

    uint IDs = 0;
    modifier IDIndexed(uint ID){ require(ID < IDs, "Out of Index"); _;}
    function IDLastIndex() public view returns(uint){return IDs;}


 mapping(uint => string) ID_AI;
        

    function XSetID(string calldata AI) internal returns(uint){
    require(AILogin(AI), "Security Error: Login");
    ID_AI[IDs] = AI;
   ++IDs;
    return (IDs - 1); }
         
    function XOwnerID(uint ID) public view IDIndexed(ID) returns(string memory){ //ID = [AI =>   Address] 
    return ID_AI[ID]; }


 mapping(uint => string) ID_XID;

    function XIDSet(uint ID, string calldata XID) internal  {
         ID_XID[ID] = XID; }//AI->ID |ID -> XID

    function XOwnerXID(uint ID) public view IDIndexed(ID) returns(string memory){
     require(AILogin(XOwnerID(ID)), "Security Error: Login");
         return ID_XID[ID]; }



}
/*
ID as owner Identifier
XID as a referenciable/direct reference

   mapping(string => XIDS) Objects;
   struct XIDS {
      string[] GameObjects;  
   }

*/
